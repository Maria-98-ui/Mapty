//notes -->
/**project objv: view the user loc map using geolocation :? browser prompts the user to jnow location
 * user can log thier workouts eg running, cycling --- etc
 */


'use strict';

// // prettier-ignore
// const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--cadence');
const inputElevation = document.querySelector('.form__input--elevation');

//buttons

const clearAll = document.querySelector('.deleteAll');
const clearAllCard = document.querySelector('.deleteAllCard');
const overlay = document.querySelector('.overlay');
const confirmBtn = document.querySelector('.confirmBtn');
const noBtn = document.querySelector('.noBtn');


// using geolocation API --browser

// display map using leaflet lib

// attach event handler to bind the map and interact -- get coords on the clicked point

// always keep pop up open, customize pop up. add color ;;;


//managing workouts--- creating classes 

class Workout{

    date = new Date();
    id = Date.now() + ''.slice(-10);
    clicks = 0;
    
    constructor(coords, distance, duration){
        this.coords = coords; //[lat, lng]
        this.distance = distance; //in km
        this.duration = duration; //in min 

    }

    _setDescription(){
        // prettier-ignore
        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

        this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${months[this.date.getMonth()]} ${this.date.getDate()}`;
    }
    click(){
        this.clicks++;
    }
}

class Running extends Workout{
    type = 'running';
    constructor(coords, distance, duration, cadence){
        super(coords, distance, duration);
        this.cadence = cadence;
        this.calcPace();

        this._setDescription();
        
    }

    calcPace(){
        //min/km
        this.pace = this.duration / this.distance;
        return this.pace;
    }
}

class Cycling extends Workout{
    type = 'cycling';
    constructor(coords, distance, duration, elevation){
        super(coords, distance, duration);
        this.elevation = elevation;

        this.calcSpeed();
        this._setDescription();
    }
    calcSpeed(){
        this.speed = this.distance / (this.duration / 60);
        return this.speed;
    }

}

// const run0 = new Running([39, -12], 5.2, 24, 178);
// const cycle0 = new Cycling([39, -12], 27, 95, 523);
// console.log(run0, cycle0);


///////////////////////////////////////////////
// create class App ---refactoring

class App{

    #map; 
    #mapEvent;
    #mapZoom = 13;
    #workouts = [];
    constructor(){
        this._getPosition();
        this.#map;
        this.#mapEvent;

        //get local user data

       this._getLocalStorage();

        //attach event handlers

        form.addEventListener('submit', this._newWorkout.bind(this));
            //....display marker once user submit the form
            // console.log(mapEvent);
    
         //clear input field

         inputType.addEventListener('change', this._toggleElevationField);
            //makes sure one of them is hidden when other is clicked 
            
        containerWorkouts.addEventListener('click', this._moveToPop.bind(this)); 
 }

    _getPosition(){

        //using bind since this keyword is undefined in a reg function, and loadMap here is reg function
        if(navigator.geolocation){
            navigator.geolocation.getCurrentPosition(this._loadMap.bind(this),function(){
                alert('location invalid')
        
            }, 
       )};
        
    } 

    _loadMap(pos){

        const {latitude} = pos.coords; //same var name as coords
        const {longitude} = pos.coords;
        console.log(`https://www.google.com/maps/@${latitude},${longitude}`)
        
         const coords = [latitude, longitude]
         this.#map = L.map('map').setView(coords, this.#mapZoom);
        
         L.tileLayer('https://tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
             attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(this.#map);

            this.#map.on('click', this._showForm.bind(this));
                
            this.#workouts.forEach(work => {
                this._renderWorkoutMarker(work);
            })
                //obj generated by leaflet to handle events
                //handling click on map
    }

    _showForm(mapE){

        this.#mapEvent = mapE;
        form.classList.remove('hidden');
        inputDistance.focus();
    
    }

    _hideform(){
        //empty inputs
        inputDistance.value = inputDuration.value = inputCadence.value = inputElevation.value = '';

        form.style.display = 'none';
        form.classList.add('hidden');
        setTimeout(() => (form.style.display = 'grid'),1000);
    }

    _toggleElevationField(){
        inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
        inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
       
    }

    //generate new workout form -- render in map and render in list

    _newWorkout(e){
        e.preventDefault();


        const validInput = (...inputs) => inputs.every(inp => Number.isFinite(inp) );
        const posNumbers = (...inputs) => inputs.every(inp => inp>0);
        //get data from form
        const type = inputType.value;
        const distance = +inputDistance.value;
        const duration = +inputDuration.value;
        const {lat, lng} = this.#mapEvent.latlng;
        let workout;



        //check if data is valid
        //.. if activity run, create run obj

        if(type === 'running'){
            const cadence = +inputCadence.value;
            // if(!Number.isFinite(distance) || !Number.isFinite(duration) || !Number.isFinite(cadence)) return alert('Input has to be +ve numbers');
            if(!validInput(distance, duration, cadence) || !posNumbers(distance, duration, cadence)) return alert('Input has to be valid numbers');
            workout = new Running([lat, lng], distance, duration, cadence);

        
        }

        if(type === 'cycling') {
                    //.. if activity cycle, create cycle obj

            const elevation = +inputElevation.value;
            if(!validInput(distance, duration, elevation) || !posNumbers(distance, duration) ) return alert('Input has to be valid numbers');
            workout = new Cycling([lat, lng], distance, duration, elevation);

        }

     //add new obj to workput array

        this.#workouts.push(workout);
        //render workout on map as marker

        this._renderWorkoutMarker(workout);
        
        this._renderWorkout(workout);

        this._hideform();
        
        //set local storage to all workouts
        this._setLocalStorage();
    }


    _renderWorkoutMarker(workout){

        const icon = L.icon({
            iconUrl: 'marker-icon.png',
            iconSize: [50, 55],
            iconAnchor: [24, 3],
           
        })
        L.marker(workout.coords , {icon: icon}).addTo(this.#map) //pop up : default
            .bindPopup(L.popup({
                   maxWidth: 250,
                   minWidth: 100,
                   autoClose: false,
                   closeOnClick: false,
                   className: `${workout.type}-popup`,
            }))
           .setPopupContent(`${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'} ${workout.description}`) //create pop and bind to marker
           .openPopup();

    }

    _renderWorkout(workout){
        let html = ` 
        <li class="workout workout--${workout.type}"     data-id="${workout.id}">
          <h2 class="workout__title">${workout.description}</h2>
          <div class="workout__details">
            <span class="workout__icon">${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'}</span>
            <span class="workout__value">${workout.distance}</span>
            <span class="workout__unit">km</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">‚è±</span>
            <span class="workout__value">${workout.duration}</span>
            <span class="workout__unit">min</span>
          </div>
          `;

          if(workout.type === 'running'){
            html += `

            <div class="workout__details">
                <span class="workout__icon">‚ö°Ô∏è</span>
                <span class="workout__value">${workout.pace.toFixed(1)}</span>
                <span class="workout__unit">min/km</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">ü¶∂üèº</span>
            <span class="workout__value">${workout.cadence}</span>
            <span class="workout__unit">spm</span>
          </div>
        </li>
            `;
          }

          if(workout.type === 'cycling'){
            html += `
            <div class="workout__details">
                <span class="workout__icon">‚ö°Ô∏è</span>
                <span class="workout__value">${workout.speed}</span>
                <span class="workout__unit">km/h</span>
            </div>
          <div class="workout__details">
            <span class="workout__icon">‚õ∞</span>
            <span class="workout__value">${workout.elevation.toFixed(1)}</span>
            <span class="workout__unit">m</span>
          </div>
        </li> 
            `;
          }

        
    
          form.insertAdjacentHTML('afterend', html);


    }

    _moveToPop(e){

        //e is the el thats clicked --> closest opp of query selection, wherever the click happens in 'workout' 
        //everything would end up in the workout li, by accessing workout we will access id
        const workoutEl = e.target.closest('.workout');

        if(!workoutEl) return;

        const workout = this.#workouts.find(work => work.id === 
            workoutEl.dataset.id ); 

        this.#map.setView(workout.coords, this.#mapZoom, {
            animate: true,
            pan:{
                duration: 1,
            },
        });

        // workout.click();

    }

    _setLocalStorage(){
        //a very simple API --> only to be used small data, not large data...
        
        localStorage.setItem('workout', JSON.stringify(this.#workouts));
    }

    _getLocalStorage(){
        const data = JSON.parse(localStorage.getItem('workout'));

        if(!data) return;

        this.#workouts = data; 
        this.#workouts.forEach(work => {
            this._renderWorkout(work);
            //render marker wont work here since this get executed at the  page load=map 
            //is undefined at page load.

            //---> so , the pos of user is to get, then map has to be loaded bfr we can render marker

        })


    }

    reset(){
        localStorage.removeItem('workout');
        location.reload();
    }
}



const app = new App();

const showCard = function(){
    clearAllCard.classList.remove('hide');
    overlay.classList.remove('hide');

    confirmBtn.addEventListener('click', function(){
        app.reset();
    })

    noBtn.addEventListener('click', function(){
        clearAllCard.classList.add('hide');
        overlay.classList.add('hide');
    }) 
}
//btn - clearAll

clearAll.addEventListener('click', function(){
    showCard();
})




//** 1.ability to edit a workout
// 2. to delete a workout 
// 3. sort workout by certain fields --distance 
// 4. rebuild running & cycle from local storage 
//5.display UI error msg and confirm msg */
// 6. position the map to show all workouts on map at once
// 7. draw lines or shapes instead of just points

//8. using thirdparty api geocode location from coordinates 
//9. display weather conditions




